const { DataTypes } = require('sequelize');

module.exports = (sequelize) => {
  const WaConversation = sequelize.define('WaConversation', {
    id: {
      type: DataTypes.UUID,
      defaultValue: DataTypes.UUIDV4,
      primaryKey: true
    },
    lead_id: {
      type: DataTypes.UUID,
      references: {
        model: 'leads',
        key: 'id'
      }
    },
    jamaah_id: {
      type: DataTypes.UUID,
      references: {
        model: 'jamaah',
        key: 'id'
      }
    },
    phone_number: {
      type: DataTypes.STRING(20),
      allowNull: false
    },
    wa_session_id: {
      type: DataTypes.STRING(255)
    },
    status: {
      type: DataTypes.ENUM('active', 'ended', 'bot_handled', 'human_handled'),
      defaultValue: 'active'
    },
    started_at: {
      type: DataTypes.DATE,
      defaultValue: DataTypes.NOW
    },
    ended_at: {
      type: DataTypes.DATE
    },
    last_message_at: {
      type: DataTypes.DATE
    },
    total_messages: {
      type: DataTypes.INTEGER,
      defaultValue: 0
    },
    ai_handled_messages: {
      type: DataTypes.INTEGER,
      defaultValue: 0
    },
    human_handled_messages: {
      type: DataTypes.INTEGER,
      defaultValue: 0
    },
    satisfaction_score: {
      type: DataTypes.INTEGER,
      validate: {
        min: 1,
        max: 5
      }
    }
  }, {
    tableName: 'wa_conversations',
    timestamps: true,
    createdAt: 'created_at',
    updatedAt: 'updated_at',
    underscored: true
  });

  WaConversation.associate = (models) => {
    WaConversation.belongsTo(models.Lead, { foreignKey: 'lead_id', as: 'lead' });
    WaConversation.belongsTo(models.Jamaah, { foreignKey: 'jamaah_id', as: 'jamaah' });
    WaConversation.hasMany(models.WaMessage, { foreignKey: 'conversation_id', as: 'messages' });
  };

  // Instance methods
  WaConversation.prototype.addMessage = async function(messageData) {
    const WaMessage = sequelize.models.WaMessage;
    
    const message = await WaMessage.create({
      conversation_id: this.id,
      ...messageData
    });
    
    // Update conversation stats
    this.total_messages += 1;
    this.last_message_at = new Date();
    
    if (messageData.is_from_bot) {
      this.ai_handled_messages += 1;
    } else if (messageData.handled_by) {
      this.human_handled_messages += 1;
    }
    
    await this.save();
    return message;
  };

  WaConversation.prototype.endConversation = async function(satisfactionScore = null) {
    this.status = 'ended';
    this.ended_at = new Date();
    if (satisfactionScore) {
      this.satisfaction_score = satisfactionScore;
    }
    await this.save();
  };

  // Class methods
  WaConversation.getOrCreateForPhone = async function(phoneNumber) {
    // Check if there's an active conversation
    let conversation = await this.findOne({
      where: {
        phone_number: phoneNumber,
        status: 'active'
      },
      include: [
        { model: sequelize.models.Lead, as: 'lead' },
        { model: sequelize.models.Jamaah, as: 'jamaah' }
      ]
    });
    
    if (!conversation) {
      // Check if lead exists
      const Lead = sequelize.models.Lead;
      let lead = await Lead.findOne({ where: { phone: phoneNumber } });
      
      // Check if jamaah exists
      const Jamaah = sequelize.models.Jamaah;
      const jamaah = await Jamaah.findOne({ where: { phone: phoneNumber } });
      
      // Create new lead if neither exists
      if (!lead && !jamaah) {
        lead = await Lead.create({
          phone: phoneNumber,
          name: 'WhatsApp User',
          source_id: await this.getWhatsAppSourceId()
        });
      }
      
      // Create new conversation
      conversation = await this.create({
        phone_number: phoneNumber,
        lead_id: lead ? lead.id : null,
        jamaah_id: jamaah ? jamaah.id : null
      });
      
      // Include associations
      await conversation.reload({
        include: [
          { model: sequelize.models.Lead, as: 'lead' },
          { model: sequelize.models.Jamaah, as: 'jamaah' }
        ]
      });
    }
    
    return conversation;
  };

  WaConversation.getWhatsAppSourceId = async function() {
    const LeadSource = sequelize.models.LeadSource;
    const source = await LeadSource.findOne({ where: { type: 'whatsapp' } });
    return source ? source.id : null;
  };

  return WaConversation;
};