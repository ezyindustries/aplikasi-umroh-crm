const { DataTypes } = require('sequelize');

module.exports = (sequelize) => {
  const Lead = sequelize.define('Lead', {
    id: {
      type: DataTypes.UUID,
      defaultValue: DataTypes.UUIDV4,
      primaryKey: true
    },
    lead_number: {
      type: DataTypes.STRING(20),
      unique: true,
      allowNull: false
    },
    name: {
      type: DataTypes.STRING(255)
    },
    phone: {
      type: DataTypes.STRING(20),
      allowNull: false,
      unique: true,
      validate: {
        is: /^[+]?[0-9]{10,15}$/
      }
    },
    email: {
      type: DataTypes.STRING(100),
      validate: {
        isEmail: true
      }
    },
    city: {
      type: DataTypes.STRING(100)
    },
    source_id: {
      type: DataTypes.UUID,
      references: {
        model: 'lead_sources',
        key: 'id'
      }
    },
    status: {
      type: DataTypes.ENUM('new', 'contacted', 'qualified', 'negotiation', 'won', 'lost'),
      defaultValue: 'new'
    },
    interest_level: {
      type: DataTypes.INTEGER,
      defaultValue: 0,
      validate: {
        min: 0,
        max: 10
      }
    },
    interested_package_id: {
      type: DataTypes.UUID,
      references: {
        model: 'packages',
        key: 'id'
      }
    },
    estimated_departure: {
      type: DataTypes.DATE
    },
    budget_range: {
      type: DataTypes.STRING(50)
    },
    notes: {
      type: DataTypes.TEXT
    },
    assigned_to: {
      type: DataTypes.UUID,
      references: {
        model: 'users',
        key: 'id'
      }
    },
    first_contact_at: {
      type: DataTypes.DATE
    },
    last_contact_at: {
      type: DataTypes.DATE
    },
    converted_to_jamaah_id: {
      type: DataTypes.UUID,
      references: {
        model: 'jamaah',
        key: 'id'
      }
    },
    converted_at: {
      type: DataTypes.DATE
    },
    lost_reason: {
      type: DataTypes.TEXT
    },
    created_by: {
      type: DataTypes.UUID,
      references: {
        model: 'users',
        key: 'id'
      }
    }
  }, {
    tableName: 'leads',
    timestamps: true,
    createdAt: 'created_at',
    updatedAt: 'updated_at',
    underscored: true,
    hooks: {
      beforeUpdate: (lead) => {
        // Update last_contact_at when status changes
        if (lead.changed('status') && ['contacted', 'qualified', 'negotiation'].includes(lead.status)) {
          lead.last_contact_at = new Date();
        }
        
        // Set first_contact_at on first contact
        if (!lead.first_contact_at && lead.status !== 'new') {
          lead.first_contact_at = new Date();
        }
        
        // Handle conversion
        if (lead.status === 'won' && !lead.converted_at) {
          lead.converted_at = new Date();
        }
      }
    }
  });

  Lead.associate = (models) => {
    Lead.belongsTo(models.LeadSource, { foreignKey: 'source_id', as: 'source' });
    Lead.belongsTo(models.Package, { foreignKey: 'interested_package_id', as: 'interestedPackage' });
    Lead.belongsTo(models.User, { foreignKey: 'assigned_to', as: 'assignedUser' });
    Lead.belongsTo(models.User, { foreignKey: 'created_by', as: 'creator' });
    Lead.belongsTo(models.Jamaah, { foreignKey: 'converted_to_jamaah_id', as: 'jamaah' });
    
    Lead.hasMany(models.WaConversation, { foreignKey: 'lead_id', as: 'conversations' });
    Lead.hasMany(models.LeadActivity, { foreignKey: 'lead_id', as: 'activities' });
    Lead.belongsToMany(models.LeadTag, { 
      through: 'lead_tag_relations',
      foreignKey: 'lead_id',
      otherKey: 'tag_id',
      as: 'tags'
    });
  };

  // Instance methods
  Lead.prototype.addActivity = async function(type, description, userId, metadata = {}) {
    const LeadActivity = sequelize.models.LeadActivity;
    return await LeadActivity.create({
      lead_id: this.id,
      activity_type: type,
      description,
      metadata,
      performed_by: userId
    });
  };

  Lead.prototype.convertToJamaah = async function(jamaahData, userId) {
    const transaction = await sequelize.transaction();
    
    try {
      // Create jamaah record
      const Jamaah = sequelize.models.Jamaah;
      const jamaah = await Jamaah.create({
        ...jamaahData,
        created_by: userId
      }, { transaction });
      
      // Update lead status
      this.status = 'won';
      this.converted_to_jamaah_id = jamaah.id;
      this.converted_at = new Date();
      await this.save({ transaction });
      
      // Add conversion activity
      await this.addActivity('conversion', `Lead converted to Jamaah ${jamaah.registration_number}`, userId, {
        jamaah_id: jamaah.id
      });
      
      await transaction.commit();
      return jamaah;
    } catch (error) {
      await transaction.rollback();
      throw error;
    }
  };

  return Lead;
};